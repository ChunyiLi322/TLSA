An internal buffer array is created and stored in bufMM .	1
An internal buffer array of length sizeMM is created and stored in bufMM .	1
Creates a new buffered output stream to write data to the specified underlying output stream with the specified buffer size.	1
The first byte read is stored into element b[off]MM , the next one into b[off+1]MM , and so on.	1
Converts the double argument to a longMM using the doubleToLongBitsMM method in class DoubleMM , and then writes that longMM value to the underlying output stream as an 8-byte quantity, high byte first.	1
This method simply performs in.read(b, off, len)MM and returns the result.	1
The markMM method of LineNumberInputStreamMM remembers the current line number in a private variable, and then calls the markMM method of the underlying input stream.	1
This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes print MM and then println MM .	1
After this method returns, the next byte to be read will have the value b[off]MM , the byte after that will have the value b[off+1]MM , and so forth.	1
After this method returns, the next character to be read will have the value cbuf[0]MM , the character after that will have the value cbuf[1]MM , and so forth.	1
After this method returns, the next character to be read will have the value cbuf[off]MM , the character after that will have the value cbuf[off+1]MM , and so forth.	1
If it reaches the end of the stream, it calls the closeMM method of the current substream and begins reading from the next substream.	1
You can authorize payments to be captured later or create an order.	1
To get a list of your refunds, you can first get a list of payments.	1
If this element is empty, the bucket's notifications are turned off.	1
For example, you can tag several resources with a specific application name, and then organize your billing information to see the total cost of that application across several services.	1
After the object copy reaches the specified lifetime, Amazon S3 removes the copy from the bucket.	1
If trueMM , the execute permission applies only to the owner's execute permission; otherwise, it applies to everybody.	-1
The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.	-1
Sets the last-modified time of the file or directory named by this abstract pathname.	-1
The argument will be truncated to fit the supported precision.	-1
If the operation succeeds and no intervening operations on the file take place, then the next invocation of the lastModified MM method will return the (possibly truncated) timeMM argument that was passed to this method.	-1
Sets the owner's or everybody's read permission for this abstract pathname.	-1
This may be used when finer manipulation of file permissions is required.	-1
If trueMM , sets the access permission to allow read operations; if falseMM to disallow read operations.	-1
If trueMM , the read permission applies only to the owner's read permission; otherwise, it applies to everybody.	-1
If the underlying file system can not distinguish the owner's read permission from that of others, then the permission will apply to everybody, regardless of this value.	-1
The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.	-1
If readableMM is falseMM and the underlying file system does not implement a read permission, then the operation will fail.	-1
An invocation of this method of the form file.setReadable(arg) behaves in exactly the same way as the invocation file.setReadable(arg, true) .	-1
If trueMM , sets the access permission to allow read operations; if falseMM to disallow read operations.	-1
trueMM if and only if the operation succeeded.	-1
The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.	-1
If readableMM is falseMM and the underlying file system does not implement a read permission, then the operation will fail.	-1
This may be used when finer manipulation of file permissions is required.	-1
If trueMM , sets the access permission to allow write operations; if falseMM to disallow write operations.	-1
If trueMM , the write permission applies only to the owner's write permission; otherwise, it applies to everybody.	-1
If the underlying file system can not distinguish the owner's write permission from that of others, then the permission will apply to everybody, regardless of this value.	-1
A convenience method to set the owner's write permission for this abstract pathname.	-1
An invocation of this method of the form file.setWritable(arg) behaves in exactly the same way as the invocation file.setWritable(arg, true) .	-1
If trueMM , sets the access permission to allow write operations; if falseMM to disallow write operations.	-1
The operation will fail if the user does not have permission to change the access permissions of this abstract pathname.	-1
Returns a java.nio.file.Path object constructed from the this abstract path.	-1
The first invocation of this method works as if invoking it were equivalent to evaluating the expression: getDefault FileSystems.getDefault ().	-1
getPath getPath ()); Subsequent invocations of this method return the same Path .	-1
Constructs a file: URI that represents this abstract pathname.	-1
The exact form of the URI is system-dependent.	-1
getAbsoluteFile getAbsoluteFile ()) so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine.	-1
The toPath toPath method may be used to obtain a Path representing this abstract pathname.	-1
If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URL will end with a slash.	-1
A URL object representing the equivalent file URL.	-1
If the path cannot be parsed as a URL.	-1
Constructs an (invalid) FileDescriptor object.	-1
In particular, if this FileDescriptor refers to a physical storage medium, such as a file in a file system, sync will not return until all in-memory modified copies of buffers associated with this FileDesecriptor have been written to the physical medium.	-1
sync is meant to be used by code that requires physical storage (such as a file) to be in a known state For example, a class that provided a simple transaction facility might use sync to ensure that all changes to a file caused by a given transaction were recorded on a storage medium.	-1
sync only affects buffers downstream of this FileDescriptor.	-1
If any in-memory buffering is being done by the application (for example, by a BufferedOutputStream object), those buffers must be flushed into the FileDescriptor (for example, by invoking OutputStream.flush) before that data will be affected by sync.	-1
Tests if this file descriptor object is valid.	-1
true if the file descriptor object represents a valid, open file, socket, or other active I/O connection; false otherwise.	-1
If fdObjMM is null then a NullPointerExceptionMM is thrown.	-1
if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.	-1
Ensures that the closeMM method of this file input stream is called when there are no more references to it.	-1
if an I/O error occurs.	-1
If this stream has an associated channel then the channel is closed as well.	-1
Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.	-1
Returns the unique &鈭╣.eclipse.jdt.core.dom.QualifiedName&& FileChannel object associated with this file input stream.	-1
The initial position MM position of the returned channel will be equal to the number of bytes read from the file so far.	-1
Reading bytes from this stream will increment the channel's position.	-1
the file channel associated with this file input stream.	-1
Reads a byte of data from this input stream.	-1
This method blocks until some input is available.	-1
the total number of bytes read into the buffer, or -1MM if there is no more data because the end of the file has been reached.	-1
if an I/O error occurs.	-1
the buffer into which the data is read.	-1
the maximum number of bytes read.	-1
the total number of bytes read into the buffer, or -1MM if there is no more data because the end of the file has been reached.	-1
Skips over and discards nMM bytes of data from the input stream.	-1
The skipMM method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0MM .	-1
If nMM is negative, an IOExceptionMM is thrown, even though the skipMM method of the superclass does nothing in this case.	-1
The actual number of bytes skipped is returned.	-1
This method may skip more bytes than are remaining in the backing file.	-1
This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file.	-1
Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.	-1
if n is negative, if the stream does not support seek, or if an I/O error occurs.	-1
Constructs a FileNotFoundExceptionMM with nullMM as its error detail message.	-1
The string sMM can be retrieved later by the getMessage MM method of class java.lang.ThrowableMM .	-1
the detail message.	-1
Creates a file output stream to write to the file represented by the specified FileMM object.	-1
If the second argument is trueMM , then bytes will be written to the end of the file rather than the beginning.	-1
A new FileDescriptorMM object is created to represent this file connection.	-1
If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundExceptionMM is thrown.	-1
if trueMM , then bytes will be written to the end of the file rather than the beginning.	-1
First, if there is a security manager, its checkWriteMM method is called with the file descriptor fdObjMM argument as its argument.	-1
If fdObjMM is null then a NullPointerExceptionMM is thrown.	-1
Cleans up the connection to the file, and ensures that the closeMM method of this file output stream is called when there are no more references to this stream.	-1
Writes b.lengthMM bytes from the specified byte array to this file output stream.	-1
the data.	-1
Writes lenMM bytes from the specified byte array starting at offset offMM to this file output stream.	-1
the data.	-1
the number of bytes to write.	-1
Closes this file output stream and releases any system resources associated with this stream.	-1
This file output stream may no longer be used for writing bytes.	-1
If this stream has an associated channel then the channel is closed as well.	-1
if an I/O error occurs.	-1
Returns the unique &鈭╣.eclipse.jdt.core.dom.QualifiedName&& FileChannel object associated with this file output stream.	-1
The initial position MM position of the returned channel will be equal to the number of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file.	-1
Writing bytes to this stream will increment the channel's position accordingly.	-1
Changing the channel's position, either explicitly or by writing, will change this stream's file position.	-1
the file channel associated with this file output stream.	-1
the FileDescriptorMM object that represents the connection to the file in the file system being used by this FileOutputStreamMM object.	-1
if an I/O error occurs.	-1
Creates a new FilePermission object using an action mask.	-1
More efficient than the FilePermission(String, String) constructor.	-1
the action mask to use.	-1
Checks two FilePermission objects for equality.	-1
Checks that obj is a FilePermission, and has the same pathname and actions as this object.	-1
trueMM if obj is a FilePermission, and has the same pathname and actions as this FilePermission object, falseMM otherwise.	-1
That is, this method always returns present actions in the following order: read, write, execute, delete, readlink.	-1
"For example, if this FilePermission object allows both write and read actions, a call to getActionsMM will return the string ""read,write""."	-1
the canonical string representation of the actions.	-1
"Check and see if this set of permissions implies the permissions expressed in ""permission""."	-1
"true if ""permission"" is a proper subset of a permission in the set, false if not."	-1
Returns a new PermissionCollection object for storing FilePermission objects.	-1
"The ""implies"" semantics for FilePermissions are handled properly by the PermissionCollection object returned by this newPermissionCollectionMM method."	-1
a new PermissionCollection object suitable for storing FilePermissions.	-1
Creates a new FileReader, given the FileDescriptor to read from.	-1
if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading.	-1
FileDescriptor object to write to.	-1
Constructs a FileWriter object given a File object.	-1
a File object to write to.	-1
if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason.	-1
This method simply performs in.close()MM .	-1
Marks the current position in this input stream.	-1
A subsequent call to the resetMM method repositions this stream at the last marked position so that subsequent reads re-read the same bytes.	-1
This method simply performs in.mark(readlimit)MM .	-1
the maximum limit of bytes that can be read before the mark position becomes invalid.	-1
Repositions this stream to the position at the time the markMM method was last called on this input stream.	-1
This method simply performs in.reset()MM .	-1
If the stream is of the type handled by the parse, it just chugs along happily.	-1
If this happens within readlimit bytes, it allows the outer code to reset the stream and try another parser.	-1
if the stream has not been marked or if the mark has been invalidated.	-1
The next caller might be the same thread or another thread.	-1
A single read or skip of this many bytes will not block, but may read or skip fewer bytes.	-1
an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking.	-1
if an I/O error occurs.	-1
This method blocks until some input is available.	-1
It is important that it does not do in.read(b)MM instead; certain subclasses of FilterInputStreamMM depend on the implementation strategy actually used.	-1
the buffer into which the data is read.	-1
if an I/O error occurs.	-1
Reads up to lenMM bytes of data from this input stream into an array of bytes.	-1
the buffer into which the data is read.	-1
the start offset in the destination array bMM .	-1
the total number of bytes read into the buffer, or -1MM if there is no more data because the end of the stream has been reached.	-1
Reads the next byte of data from this input stream.	-1
The value byte is returned as an intMM in the range 0MM to 255MM .	-1
the next byte of data, or -1MM if the end of the stream is reached.	-1
Skips over and discards nMM bytes of data from the input stream.	-1
The skipMM method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0MM .	-1
This method simply performs in.skip(n)MM .	-1
the actual number of bytes skipped.	-1
if the stream does not support seek, or if some other I/O error occurs.	-1
Tests if this input stream supports the markMM and resetMM methods.	-1
This method simply performs in.markSupported()MM .	-1
